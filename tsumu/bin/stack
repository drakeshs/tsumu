#!/usr/bin/env ruby
# ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__)
# load Gem.bin_path('bundler', 'bundle')
require 'pry'
require 'yaml'
require 'hirb'
require 'thor'

PROJECT_ROOT = Pathname.new( __dir__ ).join("..")
require PROJECT_ROOT.join("lib/stack.rb")


class MyCLI < Thor

  desc "status ENV", "Stack Status for given environment"
  def status(environment)
    stack = Stack::Base.new( environment )
    stack.status
  end

  desc "install ENV", "Create given stack environment"
  def install(environment)
    installer = Stack::Scripts::Installer.new( Stack::Base.new( environment ) )
    installer.run
  end

  desc "reinstall ENV", "Create given stack environment"
  def reinstall(environment)
    stack = Stack::Base.new( environment )
    stack.reinstall
  end

  desc "destroy ENV", "Destroy given stack environment"
  def destroy(environment)
    installer = Stack::Scripts::Uninstaller.new( Stack::Base.new( environment ) )
    installer.run
  end

  desc "bootstrap ENV application server", "Chef bootstrap given server in given environment"
  def bootstrap(environment)
    bootstrapper = Stack::Scripts::Bootstrapper.new( Stack::Base.new( environment ) )
    bootstrapper.run
  end

  desc "cache ENV action", "Execute actions over cache server \n Actions: [ create, destroy, status ]"
  def cache(environment, action)
    stack = Stack::Base.new( environment )
    case action
      when "create"
        stack.cache_group.create
        stack.cache.create
      when "destroy"
        stack.cache.destroy
        stack.cache_group.destroy
      when "status" then puts stack.cache.status
    end
  end

  desc "database ENV action", "Execute actions over database server \n Actions: [ create, destroy, status ]"
  def database(environment, action)
    stack = Stack::Base.new( environment )
    case action
      when "create"
        stack.db_group.create unless stack.db_group.exists?
        stack.database.create
      when "destroy"
        stack.database.destroy
      when "status" then puts stack.database.status
    end
  end

  desc "application ENV application action", "Execute actions on application\n Actions: [ create, destroy, status ]"
  def application(environment, application, action)
    stack = Stack::Base.new( environment )
    case action
      when "create"
        stack.get_application(application).create
      when "destroy"
        stack.get_application(application).destroy
      when "status" then puts stack.get_application(application).servers_status
    end
  end


end

MyCLI.start(ARGV)


